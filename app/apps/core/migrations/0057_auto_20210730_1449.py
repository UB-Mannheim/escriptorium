# Generated by Django 2.2.24 on 2021-07-30 14:49
import logging

import core.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations

logger = logging.getLogger(__name__)

schema = {'items': [{'properties': {'bbox': {'items': [{'contains': {'type': 'number'}, 'maxItems': 2, 'minItems': 2, 'type': 'array'}], 'maxItems': 2, 'minItems': 2, 'type': 'array'}, 'c': {'maxLength': 1, 'minLength': 1, 'type': 'string'}, 'confidence': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, 'type': 'object'}], 'type': 'array'}


def batch_qs(qs, batch_size=1000):
    total = qs.count()
    for start in range(0, total, batch_size):
        for e in qs[start:start+batch_size]:
            yield e


def dummy(apps, se):
    pass


def forward(apps, se):
    LineTranscription = apps.get_model('core', 'LineTranscription')

    for line_transcription in batch_qs(LineTranscription.objects.exclude(graphs__isnull=True)):
        try:
            line_transcription.graphs = [{
                "c": x[0],
                "bbox": [[x[1][0][0], x[1][0][1]], [x[1][2][0], x[1][2][1]]],
                "confidence": float(x[2])
            } for x in line_transcription.graphs]
        except Exception as e:
            logger.warning('Invalid graph : {0} : {1}'.format(line_transcription.graphs, e))
        else:
            line_transcription.save()


def backward(apps, se):
    LineTranscription = apps.get_model('core', 'LineTranscription')
    for line_transcription in batch_qs(LineTranscription.objects.exclude(graphs__isnull=True)):
        try:
            line_transcription.graphs = [
                (x["c"],
                 [[x["bbox"][0][0],
                   x["bbox"][0][1]],
                  [],
                  [x["bbox"][1][0],
                   x["bbox"][1][1]],
                  []],
                 x['confidence'])
                for x in line_transcription.graphs]
        except Exception as e:
            logger.warning('Invalid graph : {0} : {1}'.format(line_transcription.graphs, e))
        else:
            line_transcription.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0056_auto_20211008_1250'),
    ]

    operations = [
        migrations.RunPython(forward, dummy),

        migrations.AlterField(
            model_name='linetranscription',
            name='graphs',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, validators=[core.validators.JSONSchemaValidator(limit_value={'items': [{'properties': {'poly': {'items': [{'contains': {'type': 'number'}, 'maxItems': 2, 'minItems': 2, 'type': 'array'}], 'maxItems': 2, 'minItems': 2, 'type': 'array'}, 'c': {'maxLength': 1, 'minLength': 1, 'type': 'string'}, 'confidence': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, 'type': 'object'}], 'type': 'array'})]),
        ),

        migrations.RunPython(dummy, backward)
    ]
